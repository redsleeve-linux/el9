From 6927cde826476cf36f409c25f2984e9e4a95cb2e Mon Sep 17 00:00:00 2001
From: Jacco Ligthart <jacco@redsleeve.org>
Date: Sun, 19 Jan 2025 13:12:57 +0100
Subject: [PATCH] added arm to golang_arches

---
 SOURCES/go-1.21-arm-link-gold.patch | 52 ++++++++++++++++
 SPECS/golang.spec                   | 95 +++++++++++++++--------------
 2 files changed, 102 insertions(+), 45 deletions(-)
 create mode 100755 SOURCES/go-1.21-arm-link-gold.patch

diff --git a/SOURCES/go-1.21-arm-link-gold.patch b/SOURCES/go-1.21-arm-link-gold.patch
new file mode 100755
index 0000000..9c3ddee
--- /dev/null
+++ b/SOURCES/go-1.21-arm-link-gold.patch
@@ -0,0 +1,52 @@
+From 234576e45d8621c01c98adc870fff73ec1ed3693 Mon Sep 17 00:00:00 2001
+From: Cherry Mui <cherryyz@google.com>
+Date: Thu, 20 Jul 2023 14:13:51 -0400
+Subject: [PATCH] cmd/link: switch to gold linker on ARM in dynamic linking mode
+
+As reported in issue #61025, in shared linkage, when linking with
+GNU linker 2.35.2 it fails. I don't have the exact version of the
+GNU linker and the failure detail is unclear to me. But as we
+switch to gold linker before, we can continue to do this at least
+for Go 1.21.
+
+Fixes #61025.
+
+Change-Id: I301d9fc64e8bc82f1177c31d19b944d700cc2d7b
+---
+
+diff --git a/src/cmd/link/internal/ld/lib.go b/src/cmd/link/internal/ld/lib.go
+index 91e2d51..a624ef8 100644
+--- a/src/cmd/link/internal/ld/lib.go
++++ b/src/cmd/link/internal/ld/lib.go
+@@ -1597,12 +1597,17 @@
+ 			altLinker = "lld"
+ 		}
+ 
+-		if ctxt.Arch.InFamily(sys.ARM64) && buildcfg.GOOS == "linux" {
++		sharedLinkage := ctxt.BuildMode == BuildModeShared || ctxt.linkShared
++		if buildcfg.GOOS == "linux" && (ctxt.IsARM64() || (ctxt.IsARM() && sharedLinkage)) {
+ 			// On ARM64, the GNU linker will fail with
+ 			// -znocopyreloc if it thinks a COPY relocation is
+ 			// required. Switch to gold.
+ 			// https://sourceware.org/bugzilla/show_bug.cgi?id=19962
+ 			// https://go.dev/issue/22040
++			//
++			// On ARM, in shared linkage, linking with GNU linker 2.35.2 fails.
++			// Switch to gold.
++			// https://go.dev/issue/61025
+ 			altLinker = "gold"
+ 
+ 			// If gold is not installed, gcc will silently switch
+@@ -1613,7 +1618,11 @@
+ 			cmd := exec.Command(name, args...)
+ 			if out, err := cmd.CombinedOutput(); err == nil {
+ 				if !bytes.Contains(out, []byte("GNU gold")) {
+-					log.Fatalf("ARM64 external linker must be gold (issue #15696, 22040), but is not: %s", out)
++					if ctxt.IsARM64() {
++						log.Fatalf("ARM64 external linker must be gold (issue #15696, 22040), but is not: %s", out)
++					} else if ctxt.IsARM() {
++						log.Fatalf("ARM external linker must be gold (issue #61025), but is not: %s", out)
++					}
+ 				}
+ 			}
+ 		}
diff --git a/SPECS/golang.spec b/SPECS/golang.spec
index 79bb78f..1332586 100644
--- a/SPECS/golang.spec
+++ b/SPECS/golang.spec
@@ -29,7 +29,7 @@
 # Define GOROOT macros
 %global goroot          %{_prefix}/lib/%{name}
 %global gopath          %{_datadir}/gocode
-%global golang_arches   x86_64 aarch64 ppc64le s390x
+%global golang_arches   x86_64 aarch64 ppc64le s390x %{arm}
 %global golibdir        %{_libdir}/%{name}
 
 # Golang build options.
@@ -98,11 +98,11 @@
 %global pkg_release 1
 
 # LLVM compiler-rt version for race detector
-%global llvm_compiler_rt_version 18.1.8
+#global llvm_compiler_rt_version 18.1.8
 
 Name:           golang
 Version:        %{version}
-Release:        2%{?dist}
+Release:        2%{?dist}.redsleeve
 Summary:        The Go Programming Language
 # source tree includes several copies of Mark.Twain-Tom.Sawyer.txt under Public Domain
 License:        BSD and Public Domain
@@ -117,7 +117,7 @@ Source0:        https://github.com/golang/go/archive/refs/tags/go%{version}.tar.
 Source1:	https://github.com/golang-fips/go/archive/refs/tags/go%{version}-%{pkg_release}-openssl-fips.tar.gz
 # make possible to override default traceback level at build time by setting build tag rpm_crashtraceback
 Source2:        fedora.go
-Source3: 	https://github.com/llvm/llvm-project/releases/download/llvmorg-%{llvm_compiler_rt_version}/compiler-rt-%{llvm_compiler_rt_version}.src.tar.xz
+#Source3: 	https://github.com/llvm/llvm-project/releases/download/llvmorg-%{llvm_compiler_rt_version}/compiler-rt-%{llvm_compiler_rt_version}.src.tar.xz
 
 # The compiler is written in Go. Needs go(1.4+) compiler for build.
 # Actual Go based bootstrap compiler provided by above source.
@@ -137,13 +137,13 @@ BuildRequires:  openssl-devel
 BuildRequires:  pcre-devel, glibc-static, perl
 
 # Necessary for building llvm address sanitizer for Go race detector
-BuildRequires: libstdc++-devel
-BuildRequires: clang
+#BuildRequires: libstdc++-devel
+#BuildRequires: clang
 
 Provides:       go = %{version}-%{release}
 Requires:       %{name}-bin = %{version}-%{release}
 Requires:       %{name}-src = %{version}-%{release}
-Requires:       %{name}-race = %{version}-%{release}
+#Requires:       %{name}-race = %{version}-%{release}
 Requires:       openssl-devel
 Requires:       diffutils
 
@@ -242,12 +242,12 @@ Requires:       delve
 This is the main package for go-toolset.
 
 
-%package race
-Summary:	Race detetector library object files.
-Requires:       %{name} = %{version}-%{release}
+#package race
+#Summary:	Race detetector library object files.
+#Requires:       %{name} = %{version}-%{release}
 
-%description    race
-Binary library objects for Go's race detector.
+#description    race
+#Binary library objects for Go's race detector.
 
 %prep
 %setup -q -n go-go%{version}
@@ -287,35 +287,36 @@ cat /proc/cpuinfo
 cat /proc/meminfo
 
 # Build race detector .syso's from llvm sources
-%global tsan_buildflags %(echo %{build_cflags} | sed 's/-mtls-dialect=gnu2//')
-mkdir ../llvm
+#global tsan_buildflags %(echo %{build_cflags} | sed 's/-mtls-dialect=gnu2//')
+#mkdir ../llvm
 
-tar -xf %{SOURCE3} -C ../llvm
-tsan_go_dir="../llvm/compiler-rt-%{llvm_compiler_rt_version}.src/lib/tsan/go"
+#tar -xf %{SOURCE3} -C ../llvm
+#tsan_go_dir="../llvm/compiler-rt-%{llvm_compiler_rt_version}.src/lib/tsan/go"
 
 # The script uses uname -a and grep to set the GOARCH.  This
 # is unreliable and can get the wrong architecture in
 # circumstances like cross-architecture emulation.  We fix it
 # by just reading GOARCH directly from Go.
-export GOARCH=$(go env GOARCH)
+#export GOARCH=$(go env GOARCH)
 
-%ifarch x86_64
-pushd "${tsan_go_dir}"
-  CFLAGS="${tsan_buildflags}" CC=clang GOAMD64=v3 ./buildgo.sh
-popd
-cp "${tsan_go_dir}"/race_linux_amd64.syso ./src/runtime/race/internal/amd64v3/race_linux.syso
 
-pushd "${tsan_go_dir}"
-  CFLAGS="${tsan_buildflags}" CC=clang GOAMD64=v1 ./buildgo.sh
-popd
-cp "${tsan_go_dir}"/race_linux_amd64.syso ./src/runtime/race/internal/amd64v1/race_linux.syso
+#ifarch x86_64
+#pushd "${tsan_go_dir}"
+#  CFLAGS="${tsan_buildflags}" CC=clang GOAMD64=v3 ./buildgo.sh
+#popd
+#cp "${tsan_go_dir}"/race_linux_amd64.syso ./src/runtime/race/internal/amd64v3/race_linux.syso
 
-%else
-pushd "${tsan_go_dir}"
-  CFLAGS="${tsan_buildflags}" CC=clang ./buildgo.sh
-popd
-cp "${tsan_go_dir}"/race_linux_%{gohostarch}.syso ./src/runtime/race/race_linux_%{gohostarch}.syso
-%endif
+#pushd "${tsan_go_dir}"
+#  CFLAGS="${tsan_buildflags}" CC=clang GOAMD64=v1 ./buildgo.sh
+#popd
+#cp "${tsan_go_dir}"/race_linux_amd64.syso ./src/runtime/race/internal/amd64v1/race_linux.syso
+
+#else
+#pushd "${tsan_go_dir}"
+#  CFLAGS="${tsan_buildflags}" CC=clang ./buildgo.sh
+#popd
+#cp "${tsan_go_dir}"/race_linux_%{gohostarch}.syso ./src/runtime/race/race_linux_%{gohostarch}.syso
+#endif
 
 
 # bootstrap compiler GOROOT
@@ -550,12 +551,12 @@ cd ..
 %{_sysconfdir}/prelink.conf.d
 
 %files -f go-src.list src
-%ifarch x86_64
-%exclude %{goroot}/src/runtime/race/internal/amd64v1/race_linux.syso
-%exclude %{goroot}/src/runtime/race/internal/amd64v3/race_linux.syso
-%else
-%exclude %{goroot}/src/runtime/race/race_linux_%{gohostarch}.syso
-%endif
+#ifarch x86_64
+#exclude %{goroot}/src/runtime/race/internal/amd64v1/race_linux.syso
+#exclude %{goroot}/src/runtime/race/internal/amd64v3/race_linux.syso
+#else
+#exclude %{goroot}/src/runtime/race/race_linux_%{gohostarch}.syso
+#endif
 
 %files -f go-docs.list docs
 
@@ -574,15 +575,19 @@ cd ..
 
 %files -n go-toolset
 
-%files race
-%ifarch x86_64
-%{goroot}/src/runtime/race/internal/amd64v1/race_linux.syso
-%{goroot}/src/runtime/race/internal/amd64v3/race_linux.syso
-%else
-%{goroot}/src/runtime/race/race_linux_%{gohostarch}.syso
-%endif
+#files race
+#ifarch x86_64
+#{goroot}/src/runtime/race/internal/amd64v1/race_linux.syso
+#{goroot}/src/runtime/race/internal/amd64v3/race_linux.syso
+#else
+#{goroot}/src/runtime/race/race_linux_%{gohostarch}.syso
+#endif
 
 %changelog
+* Tue Dec 24 2024 Jacco Ligthart <jacco@redsleeve.org> - 1.22.9-2.redsleeve
+- added arm to golang_arches
+- removed custom race detector
+
 * Thu Nov 14 2024 David Benoit <dbenoit@redhat.com> - 1.22.9-2
 - Fix sources
 - Related: RHEL-67672
-- 
2.43.5

