commit 047703fbb88eb38fbe973f3abedb279382f181d0
Author: Florian Weimer <fweimer@redhat.com>
Date:   Tue Jun 6 11:37:30 2023 +0200

    support: Add delayed__exit (with two underscores)
    
    It calls _exit instead of exit once the timeout expires.

Conflicts:
	support/delayed_exit.c (fixup context)
	support/xthread.h (fixup context)

diff --git a/support/delayed_exit.c b/support/delayed_exit.c
index 450860c5953257be..9242d4a1236e94ee 100644
--- a/support/delayed_exit.c
+++ b/support/delayed_exit.c
@@ -23,33 +23,58 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <support/check.h>
+#include <support/support.h>
 #include <time.h>
+#include <unistd.h>
+
+struct delayed_exit_request
+{
+  void (*exitfunc) (int);
+  int seconds;
+};
 
 static void *
-delayed_exit_thread (void *seconds_as_ptr)
+delayed_exit_thread (void *closure)
 {
-  int seconds = (uintptr_t) seconds_as_ptr;
-  struct timespec delay = { seconds, 0 };
+  struct delayed_exit_request *request = closure;
+  void (*exitfunc) (int) = request->exitfunc;
+  struct timespec delay = { request->seconds, 0 };
   struct timespec remaining = { 0 };
+  free (request);
+
   if (nanosleep (&delay, &remaining) != 0)
     FAIL_EXIT1 ("nanosleep: %m");
-  /* Exit the process sucessfully.  */
-  exit (0);
+  /* Exit the process successfully.  */
+  exitfunc (0);
   return NULL;
 }
 
-void
-delayed_exit (int seconds)
+static void
+delayed_exit_1 (int seconds, void (*exitfunc) (int))
 {
   /* Create the new thread with all signals blocked.  */
   sigset_t all_blocked;
   sigfillset (&all_blocked);
   sigset_t old_set;
   xpthread_sigmask (SIG_SETMASK, &all_blocked, &old_set);
+  struct delayed_exit_request *request = xmalloc (sizeof (*request));
+  request->seconds = seconds;
+  request->exitfunc = exitfunc;
   /* Create a detached thread. */
-  pthread_t thr = xpthread_create
-    (NULL, delayed_exit_thread, (void *) (uintptr_t) seconds);
+  pthread_t thr = xpthread_create (NULL, delayed_exit_thread, request);
   xpthread_detach (thr);
   /* Restore the original signal mask.  */
   xpthread_sigmask (SIG_SETMASK, &old_set, NULL);
 }
+
+void
+delayed_exit (int seconds)
+{
+  delayed_exit_1 (seconds, exit);
+}
+
+void
+delayed__exit (int seconds)
+{
+  delayed_exit_1 (seconds, _exit);
+}
diff --git a/support/xthread.h b/support/xthread.h
index 1a39b1c0ddda9725..5c6b57e8829a4ee9 100644
--- a/support/xthread.h
+++ b/support/xthread.h
@@ -24,11 +24,14 @@
 
 __BEGIN_DECLS
 
-/* Terminate the process (with exit status 0) after SECONDS have
-   elapsed, from a helper thread.  The process is terminated with the
-   exit function, so atexit handlers are executed.  */
+/* Terminate the process (with exit (0)) after SECONDS have elapsed,
+   from a helper thread.  The process is terminated with the exit
+   function, so atexit handlers are executed.  */
 void delayed_exit (int seconds);
 
+/* Like delayed_exit, but use _exit (0).  */
+void delayed__exit (int seconds);
+
 /* Terminate the process (with exit status 1) if VALUE is not zero.
    In that case, print a failure message to standard output mentioning
    FUNCTION.  The process is terminated with the exit function, so
