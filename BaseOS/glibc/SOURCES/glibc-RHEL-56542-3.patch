commit 4e16d89866e660426438238a47c2345bdc47dd97
Author: Adhemerval Zanella <adhemerval.zanella@linaro.org>
Date:   Thu Aug 10 08:56:00 2023 -0300

    linux: Make fdopendir fail with O_PATH (BZ 30373)
    
    It is not strictly required by the POSIX, since O_PATH is a Linux
    extension, but it is QoI to fail early instead of at readdir.  Also
    the check is free, since fdopendir already checks if the file
    descriptor is opened for read.
    
    Checked on x86_64-linux-gnu.

Conflicts:
	sysdeps/unix/sysv/linux/Makefile (new test added)

diff --git a/sysdeps/unix/sysv/linux/Makefile b/sysdeps/unix/sysv/linux/Makefile
index 617f7718b2a5779d..74656e56038844aa 100644
--- a/sysdeps/unix/sysv/linux/Makefile
+++ b/sysdeps/unix/sysv/linux/Makefile
@@ -125,6 +125,7 @@ tests += tst-clone tst-clone2 tst-clone3 tst-fanotify tst-personality \
   tst-prctl \
   tst-scm_rights \
   tst-getauxval \
+  tst-fdopendir-o_path \
   # tests
 
 # Test for the symbol version of fcntl that was replaced in glibc 2.28.
diff --git a/sysdeps/unix/sysv/linux/fdopendir.c b/sysdeps/unix/sysv/linux/fdopendir.c
index 32ec10e206305e3c..d06eeb3cafa4966c 100644
--- a/sysdeps/unix/sysv/linux/fdopendir.c
+++ b/sysdeps/unix/sysv/linux/fdopendir.c
@@ -37,10 +37,16 @@ __fdopendir (int fd)
       return NULL;
     }
 
-  /* Make sure the descriptor allows for reading.  */
   int flags = __fcntl64_nocancel (fd, F_GETFL);
   if (__glibc_unlikely (flags == -1))
     return NULL;
+  /* Fail early for descriptors opened with O_PATH.  */
+  if (__glibc_unlikely (flags & O_PATH))
+    {
+      __set_errno (EBADF);
+      return NULL;
+    }
+  /* Make sure the descriptor allows for reading.  */
   if (__glibc_unlikely ((flags & O_ACCMODE) == O_WRONLY))
     {
       __set_errno (EINVAL);
diff --git a/sysdeps/unix/sysv/linux/tst-fdopendir-o_path.c b/sysdeps/unix/sysv/linux/tst-fdopendir-o_path.c
new file mode 100644
index 0000000000000000..2531cf8ddb92ff45
--- /dev/null
+++ b/sysdeps/unix/sysv/linux/tst-fdopendir-o_path.c
@@ -0,0 +1,48 @@
+/* Check if fdopendir fails with file descriptor opened with O_PATH (BZ 30737)
+   Copyright (C) 2023 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, see
+   <https://www.gnu.org/licenses/>.  */
+
+#include <errno.h>
+#include <fcntl.h>
+#include <dirent.h>
+#include <support/check.h>
+#include <support/temp_file.h>
+#include <support/xunistd.h>
+
+static int
+do_test (void)
+{
+  char *dirname = support_create_temp_directory ("tst-fdopendir-o_path");
+
+  {
+    int fd = xopen (dirname, O_RDONLY |  O_DIRECTORY, 0600);
+    DIR *dir = fdopendir (fd);
+    TEST_VERIFY_EXIT (dir != NULL);
+    closedir (dir);
+  }
+
+  {
+    int fd = xopen (dirname, O_RDONLY | O_PATH | O_DIRECTORY, 0600);
+    TEST_VERIFY (fdopendir (fd) == NULL);
+    TEST_COMPARE (errno, EBADF);
+    xclose (fd);
+  }
+
+  return 0;
+}
+
+#include <support/test-driver.c>
