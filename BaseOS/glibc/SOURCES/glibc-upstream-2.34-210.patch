commit e123f08ad5ea4691bc37430ce536988c221332d6
Author: Noah Goldstein <goldstein.w.n@gmail.com>
Date:   Thu Mar 24 15:50:33 2022 -0500

    x86: Fix fallback for wcsncmp_avx2 in strcmp-avx2.S [BZ #28896]
    
    Overflow case for __wcsncmp_avx2_rtm should be __wcscmp_avx2_rtm not
    __wcscmp_avx2.
    
    commit ddf0992cf57a93200e0c782e2a94d0733a5a0b87
    Author: Noah Goldstein <goldstein.w.n@gmail.com>
    Date:   Sun Jan 9 16:02:21 2022 -0600
    
        x86: Fix __wcsncmp_avx2 in strcmp-avx2.S [BZ# 28755]
    
    Set the wrong fallback function for `__wcsncmp_avx2_rtm`. It was set
    to fallback on to `__wcscmp_avx2` instead of `__wcscmp_avx2_rtm` which
    can cause spurious aborts.
    
    This change will need to be backported.
    
    All string/memory tests pass.
    Reviewed-by: H.J. Lu <hjl.tools@gmail.com>
    
    (cherry picked from commit 9fef7039a7d04947bc89296ee0d187bc8d89b772)

diff --git a/sysdeps/x86/tst-strncmp-rtm.c b/sysdeps/x86/tst-strncmp-rtm.c
index aef9866cf2fbe774..ba6543be8ce13927 100644
--- a/sysdeps/x86/tst-strncmp-rtm.c
+++ b/sysdeps/x86/tst-strncmp-rtm.c
@@ -70,6 +70,16 @@ function_overflow (void)
     return 1;
 }
 
+__attribute__ ((noinline, noclone))
+static int
+function_overflow2 (void)
+{
+  if (STRNCMP (string1, string2, SIZE_MAX >> 4) == 0)
+    return 0;
+  else
+    return 1;
+}
+
 static int
 do_test (void)
 {
@@ -77,5 +87,10 @@ do_test (void)
   if (status != EXIT_SUCCESS)
     return status;
   status = do_test_1 (TEST_NAME, LOOP, prepare, function_overflow);
+  if (status != EXIT_SUCCESS)
+    return status;
+  status = do_test_1 (TEST_NAME, LOOP, prepare, function_overflow2);
+  if (status != EXIT_SUCCESS)
+    return status;
   return status;
 }
diff --git a/sysdeps/x86_64/multiarch/strcmp-avx2.S b/sysdeps/x86_64/multiarch/strcmp-avx2.S
index f9bdc5ccd03aa1f9..09a73942086f9c9f 100644
--- a/sysdeps/x86_64/multiarch/strcmp-avx2.S
+++ b/sysdeps/x86_64/multiarch/strcmp-avx2.S
@@ -122,7 +122,7 @@ ENTRY(STRCMP)
 	   are cases where length is large enough that it can never be a
 	   bound on valid memory so just use wcscmp.  */
 	shrq	$56, %rcx
-	jnz	__wcscmp_avx2
+	jnz	OVERFLOW_STRCMP
 
 	leaq	(, %rdx, 4), %rdx
 #  endif
