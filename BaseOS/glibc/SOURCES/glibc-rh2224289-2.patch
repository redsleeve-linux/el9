commit 2c6b4b272e6b4d07303af25709051c3e96288f2d
Author: Florian Weimer <fweimer@redhat.com>
Date:   Fri Jul 21 16:18:18 2023 +0200

    nptl: Unconditionally use a 32-byte rseq area

    If the kernel headers provide a larger struct rseq, we used that
    size as the argument to the rseq system call.  As a result,
    rseq registration would fail on older kernels which only accept
    size 32.

Conflicts:
	nptl/descr.h
	  (upstream has an additional #include <internal-sigset.h>)

diff --git a/nptl/descr.h b/nptl/descr.h
index c487846c171f9434..eded9eca38e7275e 100644
--- a/nptl/descr.h
+++ b/nptl/descr.h
@@ -35,7 +35,6 @@
 #include <bits/types/res_state.h>
 #include <kernel-features.h>
 #include <tls-internal-struct.h>
-#include <sys/rseq.h>
 
 #ifndef TCB_ALIGNMENT
 # define TCB_ALIGNMENT 32
@@ -409,14 +408,25 @@ struct pthread
   /* Used on strsignal.  */
   struct tls_internal_t tls_state;
 
-  /* rseq area registered with the kernel.  */
-  struct rseq rseq_area;
+  /* rseq area registered with the kernel.  Use a custom definition
+     here to isolate from kernel struct rseq changes.  The
+     implementation of sched_getcpu needs acccess to the cpu_id field;
+     the other fields are unused and not included here.  */
+  union
+  {
+    struct
+    {
+      uint32_t cpu_id_start;
+      uint32_t cpu_id;
+    };
+    char pad[32];		/* Original rseq area size.  */
+  } rseq_area __attribute__ ((aligned (32)));
 
   /* Amount of end padding, if any, in this structure.
      This definition relies on rseq_area being last.  */
 #define PTHREAD_STRUCT_END_PADDING \
   (sizeof (struct pthread) - offsetof (struct pthread, rseq_area) \
-   + sizeof (struct rseq))
+   + sizeof ((struct pthread) {}.rseq_area))
 } __attribute ((aligned (TCB_ALIGNMENT)));
 
 static inline bool
