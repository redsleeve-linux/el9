From ddaf24341a512a9891226e85c13d51d7e2cfcb01 Mon Sep 17 00:00:00 2001
From: David Tardon <dtardon@redhat.com>
Date: Tue, 10 Aug 2021 14:46:16 +0200
Subject: [PATCH] Revert "udev: remove WAIT_FOR key"

This reverts commit f2b8052fb648b788936dd3e85be6a9aca90fbb2f.

RHEL-only

Related: #2138081
---
 man/udev.xml              |  9 +++++++
 src/udev/udev-rules.c     | 56 +++++++++++++++++++++++++++++++++++++++
 test/rule-syntax-check.py |  2 +-
 3 files changed, 66 insertions(+), 1 deletion(-)

diff --git a/man/udev.xml b/man/udev.xml
index 142f295f3e..5b096c7ef2 100644
--- a/man/udev.xml
+++ b/man/udev.xml
@@ -592,6 +592,15 @@
             </listitem>
           </varlistentry>
 
+          <varlistentry>
+            <term><varname>WAIT_FOR</varname></term>
+            <listitem>
+              <para>Wait for a file to become available or until a timeout of
+              10 seconds expires. The path is relative to the sysfs device;
+              if no path is specified, this waits for an attribute to appear.</para>
+            </listitem>
+          </varlistentry>
+
           <varlistentry>
             <term><varname>OPTIONS</varname></term>
             <listitem>
diff --git a/src/udev/udev-rules.c b/src/udev/udev-rules.c
index f44a174d1f..a8473041c3 100644
--- a/src/udev/udev-rules.c
+++ b/src/udev/udev-rules.c
@@ -79,6 +79,7 @@ typedef enum {
         TK_M_TAG,                           /* strv, sd_device_get_tag_first(), sd_device_get_tag_next() */
         TK_M_SUBSYSTEM,                     /* string, sd_device_get_subsystem() */
         TK_M_DRIVER,                        /* string, sd_device_get_driver() */
+        TK_M_WAITFOR,
         TK_M_ATTR,                          /* string, takes filename through attribute, sd_device_get_sysattr_value(), udev_resolve_subsys_kernel(), etc. */
         TK_M_SYSCTL,                        /* string, takes kernel parameter through attribute */
 
@@ -411,6 +412,47 @@ static void rule_line_append_token(UdevRuleLine *rule_line, UdevRuleToken *token
         rule_line->current_token = token;
 }
 
+#define WAIT_LOOP_PER_SECOND                50
+static int wait_for_file(sd_device *dev, const char *file, int timeout) {
+        char filepath[UDEV_PATH_SIZE];
+        char devicepath[UDEV_PATH_SIZE];
+        struct stat stats;
+        int loop = timeout * WAIT_LOOP_PER_SECOND;
+
+        /* a relative path is a device attribute */
+        devicepath[0] = '\0';
+        if (file[0] != '/') {
+                const char *val;
+                int r;
+
+                r = sd_device_get_syspath(dev, &val);
+                if (r < 0)
+                    return r;
+                strscpyl(devicepath, sizeof(devicepath), val, NULL);
+                strscpyl(filepath, sizeof(filepath), devicepath, "/", file, NULL);
+                file = filepath;
+        }
+
+        while (--loop) {
+                const struct timespec duration = { 0, 1000 * 1000 * 1000 / WAIT_LOOP_PER_SECOND };
+
+                /* lookup file */
+                if (stat(file, &stats) == 0) {
+                        log_debug("file '%s' appeared after %i loops", file, (timeout * WAIT_LOOP_PER_SECOND) - loop-1);
+                        return 0;
+                }
+                /* make sure, the device did not disappear in the meantime */
+                if (devicepath[0] != '\0' && stat(devicepath, &stats) != 0) {
+                        log_debug("device disappeared while waiting for '%s'", file);
+                        return -2;
+                }
+                log_debug("wait for '%s' for %i mseconds", file, 1000 / WAIT_LOOP_PER_SECOND);
+                nanosleep(&duration, NULL);
+        }
+        log_debug("waiting for '%s' failed", file);
+        return -1;
+}
+
 static int rule_line_add_token(UdevRuleLine *rule_line, UdevRuleTokenType type, UdevRuleOperatorType op, char *value, void *data) {
         UdevRuleToken *token;
         UdevRuleMatchType match_type = _MATCH_TYPE_INVALID;
@@ -953,6 +995,12 @@ static int parse_token(UdevRules *rules, const char *key, char *attr, UdevRuleOp
                         r = rule_line_add_token(rule_line, TK_A_RUN_BUILTIN, op, value, UDEV_BUILTIN_CMD_TO_PTR(cmd));
                 } else
                         return log_token_invalid_attr(rules, key);
+        } else if (streq(key, "WAIT_FOR") || streq(key, "WAIT_FOR_SYSFS")) {
+                if (op == OP_REMOVE)
+                        return log_token_invalid_op(rules, key);
+
+                rule_line_add_token(rule_line, TK_M_WAITFOR, 0, value, NULL);
+                return 1;
         } else if (streq(key, "GOTO")) {
                 if (attr)
                         return log_token_invalid_attr(rules, key);
@@ -1670,6 +1718,14 @@ static int udev_rule_apply_token_to_event(
 
                 return token_match_string(token, val);
         }
+        case TK_M_WAITFOR: {
+                char filename[UDEV_PATH_SIZE];
+                int found;
+
+                udev_event_apply_format(event, token->value, filename, sizeof(filename), false, NULL);
+                found = (wait_for_file(event->dev, filename, 10) == 0);
+                return found || (token->op == OP_NOMATCH);
+        }
         case TK_M_ATTR:
         case TK_M_PARENTS_ATTR:
                 return token_match_attr(rules, token, dev, event);
diff --git a/test/rule-syntax-check.py b/test/rule-syntax-check.py
index ec1c75a854..5543931064 100755
--- a/test/rule-syntax-check.py
+++ b/test/rule-syntax-check.py
@@ -18,7 +18,7 @@ no_args_tests = re.compile(r'(ACTION|DEVPATH|KERNELS?|NAME|SYMLINK|SUBSYSTEMS?|D
 # PROGRAM can also be specified as an assignment.
 program_assign = re.compile(r'PROGRAM\s*=\s*' + quoted_string_re + '$')
 args_tests = re.compile(r'(ATTRS?|ENV|CONST|TEST){([a-zA-Z0-9/_.*%-]+)}\s*(?:=|!)=\s*' + quoted_string_re + '$')
-no_args_assign = re.compile(r'(NAME|SYMLINK|OWNER|GROUP|MODE|TAG|RUN|LABEL|GOTO|OPTIONS|IMPORT)\s*(?:\+=|:=|=)\s*' + quoted_string_re + '$')
+no_args_assign = re.compile(r'(NAME|SYMLINK|OWNER|GROUP|MODE|TAG|RUN|LABEL|GOTO|WAIT_FOR|OPTIONS|IMPORT)\s*(?:\+=|:=|=)\s*' + quoted_string_re + '$')
 args_assign = re.compile(r'(ATTR|ENV|IMPORT|RUN){([a-zA-Z0-9/_.*%-]+)}\s*(=|\+=)\s*' + quoted_string_re + '$')
 # Find comma-separated groups, but allow commas that are inside quoted strings.
 # Using quoted_string_re + '?' so that strings missing the last double quote
